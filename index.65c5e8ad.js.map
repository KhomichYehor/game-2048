{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nfunction $09e991522ca7e64e$var$keyListener(e) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n    }\n    $09e991522ca7e64e$var$update();\n}\nfunction $09e991522ca7e64e$var$update() {\n    $09e991522ca7e64e$var$game.getState().forEach((row, i)=>{\n        row.forEach((el, j)=>{\n            let cellCssClass = \"field-cell\";\n            cellCssClass += el >= 2 ? ` field-cell--${el}` : \"\";\n            $09e991522ca7e64e$var$gameCells[i][j].innerText = el || \"\";\n            $09e991522ca7e64e$var$gameCells[i][j].className = cellCssClass;\n        });\n    });\n    $09e991522ca7e64e$var$scoreElement.innerText = $09e991522ca7e64e$var$game.getScore();\n    switch($09e991522ca7e64e$var$game.getStatus().toUpperCase()){\n        case \"WIN\":\n            $09e991522ca7e64e$var$changeMessage(\"WIN\");\n            break;\n        case \"LOSE\":\n            $09e991522ca7e64e$var$changeMessage(\"LOSE\");\n            break;\n        case \"NO_MOVES\":\n            $09e991522ca7e64e$var$changeMessage(\"NO_MOVES\");\n            break;\n        default:\n            $09e991522ca7e64e$var$hideAllMessages();\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$start() {\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"idle\":\n            $09e991522ca7e64e$var$game.start();\n            $09e991522ca7e64e$var$toggleButton(\"restart\");\n            $09e991522ca7e64e$var$removeStartMessage();\n            break;\n        case \"playing\":\n        case \"win\":\n        case \"lose\":\n            $09e991522ca7e64e$var$game.restart();\n            $09e991522ca7e64e$var$toggleButton(\"start\");\n            $09e991522ca7e64e$var$changeMessage(\"START\");\n            break;\n    }\n    $09e991522ca7e64e$var$update();\n}\nfunction $09e991522ca7e64e$var$removeStartMessage() {\n    const startMessage = document.querySelector(\".message-start\");\n    if (startMessage) startMessage.remove();\n}\nfunction $09e991522ca7e64e$var$toggleButton(text) {\n    $09e991522ca7e64e$var$button.classList.toggle(\"start\");\n    $09e991522ca7e64e$var$button.classList.toggle(\"restart\");\n    $09e991522ca7e64e$var$button.innerText = text.toUpperCase();\n}\nfunction $09e991522ca7e64e$var$changeMessage(type) {\n    let messageClass;\n    switch(type.toUpperCase()){\n        case \"WIN\":\n            messageClass = \".message-win\";\n            break;\n        case \"LOSE\":\n            messageClass = \".message-lose\";\n            break;\n        case \"START\":\n            messageClass = \".message-start\";\n            break;\n        case \"NO_MOVES\":\n            messageClass = \".message-no-moves\";\n            break;\n        default:\n            throw new Error(\"unknown type\");\n    }\n    $09e991522ca7e64e$var$messageContainer.querySelector(messageClass).classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$hideAllMessages() {\n    $09e991522ca7e64e$var$messageContainer.querySelectorAll(\".message\").forEach((msg)=>msg.classList.add(\"hidden\"));\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static get deafultSize() {\n        return 4;\n    }\n    static get deafultInitialState() {\n        return new Array($a5fd07fa01589658$var$Game.deafultSize).fill(null).map((el)=>new Array($a5fd07fa01589658$var$Game.deafultSize).fill(0));\n    }\n    // current game status\n    #status = \"idle\";\n    // current score\n    #score = 0;\n    // flag for Game objects exiting only for checking moves\n    #isForCheck = false;\n    // current state of gamefield\n    #state;\n    // initial state of gamefield\n    #initialState;\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = $a5fd07fa01589658$var$Game.deafultInitialState, isForCheck = false){\n        this.#initialState = initialState.map((row)=>[\n                ...row\n            ]);\n        this.#applyInitialState();\n        this.#isForCheck = isForCheck;\n    }\n    moveLeft() {\n        let isStateChanged = false;\n        if (this.#status !== \"playing\" && !this.#isForCheck) return isStateChanged;\n        this.#state.forEach((row)=>{\n            const mergedCellsIndexes = new Set();\n            const emptyIndexes = [];\n            for(let i = 0; i < row.length; i++){\n                if (row[i] === 0) {\n                    emptyIndexes.push(i);\n                    continue;\n                }\n                let cellIndex = i;\n                if (emptyIndexes.length) {\n                    cellIndex = emptyIndexes.shift();\n                    emptyIndexes.push(i);\n                    row[cellIndex] = row[i];\n                    row[i] = 0;\n                    isStateChanged = true;\n                }\n                const previousCellIndex = cellIndex - 1;\n                if (previousCellIndex >= 0 && row[previousCellIndex] === row[cellIndex] && !mergedCellsIndexes.has(previousCellIndex)) {\n                    mergedCellsIndexes.add(previousCellIndex);\n                    row[previousCellIndex] *= 2;\n                    row[cellIndex] = 0;\n                    emptyIndexes.unshift(cellIndex);\n                    this.#score += row[previousCellIndex];\n                    isStateChanged = true;\n                    if (row[previousCellIndex] >= 2048) this.#status = \"win\";\n                }\n            }\n        });\n        if (isStateChanged) this.#addNumber();\n        if (!this.#isForCheck && !this.#isMovePossible()) this.#status = \"lose\";\n        return isStateChanged;\n    }\n    moveRight() {\n        this.#reverse();\n        const result = this.moveLeft();\n        this.#reverse();\n        return result;\n    }\n    moveUp() {\n        this.#rotate();\n        const result = this.moveLeft();\n        this.#rotate();\n        return result;\n    }\n    moveDown() {\n        this.#rotate();\n        const result = this.moveRight();\n        this.#rotate();\n        return result;\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.#score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.#state.map((row)=>[\n                ...row\n            ]);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.#status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.#addNumber();\n        this.#addNumber();\n        this.#status = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.#applyInitialState();\n        this.#score = 0;\n        this.#status = \"idle\";\n    }\n    #applyInitialState() {\n        this.#state = this.#initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    /**\n   * Checks if any move is possible\n   * @returns {boolean}\n   */ #isMovePossible() {\n        const gameCopy = new $a5fd07fa01589658$var$Game(this.getState(), true);\n        return gameCopy.moveLeft() || gameCopy.moveRight() || gameCopy.moveUp() || gameCopy.moveDown();\n    }\n    /**\n   * Returns if adding number to state was succesfull\n   * @returns {boolean}\n   */ #addNumber() {\n        const number = Math.random() > 0.1 ? 2 : 4;\n        const emptyFields = this.#findEmptyFields();\n        if (!emptyFields.length) return false;\n        const randomIndex = Math.floor(Math.random() * emptyFields.length);\n        const { x: x, y: y } = emptyFields[randomIndex];\n        this.#state[y][x] = number;\n        return true;\n    }\n    /**\n   * Returns positions of empty fields in state\n   * @returns {({ x: number, y: number})[]}\n   */ #findEmptyFields() {\n        const result = [];\n        this.#state.forEach((row, y)=>{\n            row.forEach((cell, x)=>{\n                if (cell === 0) result.push({\n                    x: x,\n                    y: y\n                });\n            });\n        });\n        return result;\n    }\n    // reverser rows of state\n    #reverse() {\n        this.#state.forEach((row)=>row.reverse());\n    }\n    // changes idexes from state[x][y] to state[y][x] rotating state array\n    #rotate() {\n        this.#state = this.#state.map((row, i)=>{\n            const newRow = [];\n            for(let j = 0; j < row.length; j++)newRow.push(this.#state[j][i]);\n            return newRow;\n        });\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$gameCells = Array.from($09e991522ca7e64e$var$gameField.querySelectorAll(\".field-row\")).map((row)=>Array.from(row.children));\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageContainer = document.querySelector(\".message-container\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button.start\");\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$keyListener);\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$start);\n\n\n//# sourceMappingURL=index.65c5e8ad.js.map\n","'use strict';\n\nfunction keyListener(e) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n  }\n\n  update();\n}\n\nfunction update() {\n  game.getState().forEach((row, i) => {\n    row.forEach((el, j) => {\n      let cellCssClass = 'field-cell';\n\n      cellCssClass += el >= 2 ? ` field-cell--${el}` : '';\n      gameCells[i][j].innerText = el || '';\n      gameCells[i][j].className = cellCssClass;\n    });\n  });\n\n  scoreElement.innerText = game.getScore();\n\n  switch (game.getStatus().toUpperCase()) {\n    case 'WIN':\n      changeMessage('WIN');\n      break;\n    case 'LOSE':\n      changeMessage('LOSE');\n      break;\n    case 'NO_MOVES':\n      changeMessage('NO_MOVES');\n      break;\n    default:\n      hideAllMessages();\n      break;\n  }\n}\n\nfunction start() {\n  switch (game.getStatus()) {\n    case 'idle':\n      game.start();\n      toggleButton('restart');\n      removeStartMessage();\n      break;\n    case 'playing':\n    case 'win':\n    case 'lose':\n      game.restart();\n      toggleButton('start');\n      changeMessage('START');\n      break;\n  }\n\n  update();\n}\n\nfunction removeStartMessage() {\n  const startMessage = document.querySelector('.message-start');\n\n  if (startMessage) {\n    startMessage.remove();\n  }\n}\n\nfunction toggleButton(text) {\n  button.classList.toggle('start');\n  button.classList.toggle('restart');\n  button.innerText = text.toUpperCase();\n}\n\nfunction changeMessage(type) {\n  let messageClass;\n\n  switch (type.toUpperCase()) {\n    case 'WIN':\n      messageClass = '.message-win';\n      break;\n    case 'LOSE':\n      messageClass = '.message-lose';\n      break;\n    case 'START':\n      messageClass = '.message-start';\n      break;\n    case 'NO_MOVES':\n      messageClass = '.message-no-moves';\n      break;\n    default:\n      throw new Error('unknown type');\n  }\n\n  messageContainer.querySelector(messageClass).classList.remove('hidden');\n}\n\nfunction hideAllMessages() {\n  messageContainer\n    .querySelectorAll('.message')\n    .forEach((msg) => msg.classList.add('hidden'));\n}\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst gameField = document.querySelector('.game-field');\nconst gameCells = Array.from(gameField.querySelectorAll('.field-row')).map(\n  (row) => Array.from(row.children),\n);\nconst scoreElement = document.querySelector('.game-score');\nconst messageContainer = document.querySelector('.message-container');\nconst button = document.querySelector('.button.start');\n\ndocument.addEventListener('keydown', keyListener);\nbutton.addEventListener('click', start);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static get deafultSize() {\n    return 4;\n  }\n\n  static get deafultInitialState() {\n    return new Array(Game.deafultSize)\n      .fill(null)\n      .map((el) => new Array(Game.deafultSize).fill(0));\n  }\n  // current game status\n  #status = 'idle';\n  // current score\n  #score = 0;\n  // flag for Game objects exiting only for checking moves\n  #isForCheck = false;\n  // current state of gamefield\n  #state;\n  // initial state of gamefield\n  #initialState;\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = Game.deafultInitialState, isForCheck = false) {\n    this.#initialState = initialState.map((row) => [...row]);\n    this.#applyInitialState();\n    this.#isForCheck = isForCheck;\n  }\n\n  moveLeft() {\n    let isStateChanged = false;\n\n    if (this.#status !== 'playing' && !this.#isForCheck) {\n      return isStateChanged;\n    }\n\n    this.#state.forEach((row) => {\n      const mergedCellsIndexes = new Set();\n      const emptyIndexes = [];\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === 0) {\n          emptyIndexes.push(i);\n          continue;\n        }\n\n        let cellIndex = i;\n\n        if (emptyIndexes.length) {\n          cellIndex = emptyIndexes.shift();\n          emptyIndexes.push(i);\n\n          row[cellIndex] = row[i];\n          row[i] = 0;\n          isStateChanged = true;\n        }\n\n        const previousCellIndex = cellIndex - 1;\n\n        if (\n          previousCellIndex >= 0 &&\n          row[previousCellIndex] === row[cellIndex] &&\n          !mergedCellsIndexes.has(previousCellIndex)\n        ) {\n          mergedCellsIndexes.add(previousCellIndex);\n          row[previousCellIndex] *= 2;\n          row[cellIndex] = 0;\n          emptyIndexes.unshift(cellIndex);\n          this.#score += row[previousCellIndex];\n          isStateChanged = true;\n\n          if (row[previousCellIndex] >= 2048) {\n            this.#status = 'win';\n          }\n        }\n      }\n    });\n\n    if (isStateChanged) {\n      this.#addNumber();\n    }\n\n    if (!this.#isForCheck && !this.#isMovePossible()) {\n      this.#status = 'lose';\n    }\n\n    return isStateChanged;\n  }\n  moveRight() {\n    this.#reverse();\n\n    const result = this.moveLeft();\n\n    this.#reverse();\n\n    return result;\n  }\n  moveUp() {\n    this.#rotate();\n\n    const result = this.moveLeft();\n\n    this.#rotate();\n\n    return result;\n  }\n  moveDown() {\n    this.#rotate();\n\n    const result = this.moveRight();\n\n    this.#rotate();\n\n    return result;\n  }\n\n  /**\n   * @returns {number}\n   */\n\n  getScore() {\n    return this.#score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n\n  getState() {\n    return this.#state.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.#status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.#addNumber();\n    this.#addNumber();\n    this.#status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.#applyInitialState();\n    this.#score = 0;\n    this.#status = 'idle';\n  }\n\n  #applyInitialState() {\n    this.#state = this.#initialState.map((row) => [...row]);\n  }\n  /**\n   * Checks if any move is possible\n   * @returns {boolean}\n   */\n  #isMovePossible() {\n    const gameCopy = new Game(this.getState(), true);\n\n    return (\n      gameCopy.moveLeft() ||\n      gameCopy.moveRight() ||\n      gameCopy.moveUp() ||\n      gameCopy.moveDown()\n    );\n  }\n  /**\n   * Returns if adding number to state was succesfull\n   * @returns {boolean}\n   */\n  #addNumber() {\n    const number = Math.random() > 0.1 ? 2 : 4;\n    const emptyFields = this.#findEmptyFields();\n\n    if (!emptyFields.length) {\n      return false;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyFields.length);\n    const { x, y } = emptyFields[randomIndex];\n\n    this.#state[y][x] = number;\n\n    return true;\n  }\n  /**\n   * Returns positions of empty fields in state\n   * @returns {({ x: number, y: number})[]}\n   */\n  #findEmptyFields() {\n    const result = [];\n\n    this.#state.forEach((row, y) => {\n      row.forEach((cell, x) => {\n        if (cell === 0) {\n          result.push({ x, y });\n        }\n      });\n    });\n\n    return result;\n  }\n  // reverser rows of state\n  #reverse() {\n    this.#state.forEach((row) => row.reverse());\n  }\n  // changes idexes from state[x][y] to state[y][x] rotating state array\n  #rotate() {\n    this.#state = this.#state.map((row, i) => {\n      const newRow = [];\n\n      for (let j = 0; j < row.length; j++) {\n        newRow.push(this.#state[j][i]);\n      }\n\n      return newRow;\n    });\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$update","$09e991522ca7e64e$var$game","getState","forEach","row","i","el","j","cellCssClass","$09e991522ca7e64e$var$gameCells","innerText","className","$09e991522ca7e64e$var$scoreElement","getScore","getStatus","toUpperCase","$09e991522ca7e64e$var$changeMessage","$09e991522ca7e64e$var$messageContainer","querySelectorAll","msg","classList","add","$09e991522ca7e64e$var$toggleButton","text","$09e991522ca7e64e$var$button","toggle","type","messageClass","Error","querySelector","remove","$a5fd07fa01589658$var$Game","deafultSize","deafultInitialState","Array","fill","map","status","score","isForCheck","state","initialState","constructor","applyInitialState","moveLeft","isStateChanged","mergedCellsIndexes","Set","emptyIndexes","length","push","cellIndex","shift","previousCellIndex","has","unshift","addNumber","isMovePossible","moveRight","reverse","result","moveUp","rotate","moveDown","start","restart","gameCopy","emptyFields","findEmptyFields","randomIndex","Math","floor","random","x","y","cell","newRow","from","$09e991522ca7e64e$var$gameField","document","children","addEventListener","e","key","$09e991522ca7e64e$var$removeStartMessage","startMessage"],"version":3,"file":"index.65c5e8ad.js.map"}